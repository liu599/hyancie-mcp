# 构建顺序
stages:
  - build-and-push-tag
  - build-and-push
variables:
  IMGNAME: platform/hyancie-mcp
  DOCKER_REGISTRY: harbor01.litcompute.com
  GIT_CLEAN_FLAGS: -ffdx  # 强制删除未跟踪的文件和目录，包括被忽略的文件
  GIT_STRATEGY: fetch     # 使用fetch而不是clone，减少文件操作
  GIT_CHECKOUT: "true"    # 确保检出代码
  GIT_DEPTH: 1           # 只获取最近的一次提交
  GIT_FETCH_EXTRA_FLAGS: --prune  # 删除远程已经不存在的分支的引用
  GIT_SUBMODULE_STRATEGY: recursive  # 递归清理子模块


build-and-push:
  stage: build-and-push
  script:
    - docker build -t $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA} .
    - docker push $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
    - docker rmi $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
  # 匹配有改标签的Runner，必须指定
  tags:
    - quality
  except:
    - tags

build-and-push-tag:
  stage: build-and-push
  script:
    - docker build -t $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA} .
    - docker push $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
    - docker rmi $DOCKER_REGISTRY/$IMGNAME:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
  # 匹配有改标签的Runner，必须指定
  tags:
    - quality
  only:
    - tags
